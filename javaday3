/*
스택 수열
package Practice;
import java.util.Scanner;
import java.util.Stack;

public class Practice
{
	public static void main(String[] args)
	{
		Scanner input = new Scanner(System.in);
		Stack<Integer> stack = new Stack<Integer>();
		StringBuffer ans = new StringBuffer();
		
		int n = input.nextInt(), cnt = 0;
		boolean flag = true;
		
		while(n>0)
		{
			int w = input.nextInt();

			while(w > cnt)
			{
				stack.push(++cnt);
				ans.append("+\n");
			}
			if(stack.peek() != w)
			{
				flag = false;
			}
			stack.pop();
			ans.append("-\n");
			n--;
		}
		if(flag)System.out.println(ans);
		else	System.out.println("NO");
		input.close();
	}
}
*/
/*
스택2
package Practice;
import java.util.Scanner;
import java.util.Stack;

public class Practice
{
	public static void main(String[] args)
	{
		Scanner input = new Scanner(System.in);
		Stack<Integer> stack = new Stack<Integer>();
		
		int N = input.nextInt();		
		int A[] = new int[N];
		int ans[] = new int[N];
		A[0] = input.nextInt();
		
		stack.push(0);
		for(int i=1; i<N; i++)
		{	
			A[i] = input.nextInt();
			
			while(!stack.empty() && A[stack.peek()] < A[i])
			{
				ans[stack.pop()] = A[i];
				//if(stack.empty()) break;
			}
			stack.push(i);			
		}
		while(!stack.empty()) ans[stack.pop()] = -1;
		
		for(int i=0; i<N; i++) System.out.print(ans[i] + " ");
		input.close();
	}	
}
*/
/* 큐 연습
package Practice;

import java.util.LinkedList;
import java.util.Queue;

public class Practice
{
	public static void main(String[] args)
	{
		Queue<Integer> q = new LinkedList<>();
		
		q.add(1);
		q.add(10);
		q.add(-3);
		q.add(5);
		q.add(11);
		
		System.out.println(q);
		
		System.out.println(q.poll());
		System.out.println("size=" + q.size());
		System.out.println(q);
		
		for(Integer i:q)
		{
			System.out.println(i);
		}
		int size=q.size();
		for(int i=0; i<size; i++) System.out.println(q.poll());	
		System.out.println(q);
	}	
}
*/
/* 큐 카드문제 간단식 : (input - (input값의 가장큰 2의제곱수))*2
package Practice;

import java.util.Scanner;
import java.util.LinkedList;
import java.util.Queue;

public class Practice
{
	public static void main(String[] args)
	{
		Queue<Integer> q = new LinkedList<>();
		Scanner input = new Scanner(System.in);
		int N = input.nextInt();
		for(int i=1; i<=N; i++) q.add(i);
		
		while(q.size() != 1)
		{
			q.poll();
			q.add(q.poll());
		}
		System.out.println(q.poll());
		input.close();
	}	
}
*/
/*큐 카드 연습 문제
package Practice;

import java.util.Scanner;
import java.util.LinkedList;
import java.util.Queue;

public class Practice
{
	public static void main(String[] args)
	{
		Queue<Integer> q = new LinkedList<>();
		Scanner input = new Scanner(System.in);
		int N = input.nextInt();
		for(int i=1; i<=N; i++) q.add(i);
		
		while(q.size() != 1)
		{
			q.poll();
			q.add(q.poll());
		}
		System.out.println(q.poll());
		input.close();
	}	
}
*/
/*  PriorityQueue 연습
package Practice;

import java.util.PriorityQueue;

public class Practice
{
	public static void main(String[] args)
	{
		PriorityQueue<Integer> q = new PriorityQueue<>();
		
		q.add(11);
		q.add(1);
		q.add(-1);
		q.add(10);
		q.add(3);
		q.add(5);
		
		int size = q.size();
		
		for(int i=0; i<size; i++) System.out.print(q.poll() + " ");
	}	
}
*/
/* 우선순위 큐 정렬
package Practice;

import java.util.PriorityQueue;
import java.util.Scanner;

public class Practice
{
	public static void main(String[] args)
	{
		PriorityQueue<Double> q = new PriorityQueue<>();
		Scanner input = new Scanner(System.in);
		
		int N = input.nextInt();
		for(int i=0; i<N; i++)
		{
			double A = input.nextDouble();
			if(A!=0)
			{
				if(A>0) q.add(A+0.5);
				else if(A<0) q.add(A*(-1));
			}
			else 
			{
				if(q.isEmpty()) System.out.println("0");
				else
				{
					if(q.peek()%1 == 0) System.out.println((int)(q.poll()*(-1)));
					else if(q.peek()%1 != 0) System.out.println((int)(q.poll()-(0.5)));
				}
			}
		}
		input.close();
	}
}
*/
package Practice;

import java.util.PriorityQueue;
import java.util.Scanner;

public class Practice
{
	public static void main(String[] args)
	{
		PriorityQueue<Integer> q = new PriorityQueue<>
		(
			(o1, o2) -> 
			{
				int first = Math.abs(o1);
				int second = Math.abs(o2);
				if(first == second)
					return o1 > o2 ? 1 :-1;
				else
					return first - second;
			}
		);
		
		Scanner input = new Scanner(System.in);
		int N = input.nextInt();
		for(int i=0; i<N; i++)
		{
			int tc = input.nextInt();
			if(tc == 0)
			{
				if(q.isEmpty()) System.out.println("0");
				else System.out.println(q.poll());
			}
			else q.add(tc);
		}
		
		input.close();
	}
}
